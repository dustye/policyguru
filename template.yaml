AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  policyguru.io

  Sample SAM Template for policyguru.io

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  HostedZoneId:
    Type: String
    Description: The Hosted Zone ID
  DomainName:
    Type: String
    Description: The domain name
  Region:
    Type: String
    Description: The AWS region
    Default: "us-east-1"

# Resource details: https://github.com/aws/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
Resources:
  # Policy Sentry's Write Policy functions
  WritePolicyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/write_policy/
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        WritePolicy:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /write
            Method: post

  # This one is used by the UI
  CallPolicyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/write_policy/
      Handler: app.ui_response_handler
      Runtime: python3.8
      Events:
        WritePolicy:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /call_policy
            Method: post

  # Cloudsplaining scan-policy-file function
  ScanPolicyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/scan_policy/
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        ScanPolicy:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /scan
            Method: post

  # Policy Sentry's query functions

  QueryActionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/query_actions/
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        ScanPolicy:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /query/actions
            Method: get

  QueryResourcesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/query_resources/
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        ScanPolicy:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /query/resources
            Method: get

  QueryConditionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/query_conditions/
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        ScanPolicy:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /query/conditions
            Method: get

  # API Gateway V2 type
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      DisableExecuteApiEndpoint: true
      Domain:
        DomainName: !Sub "api.${DomainName}"
        CertificateArn: !Ref ApiCertificate
        Route53:
          HostedZoneId: !Sub "${HostedZoneId}"
          # TODO: Change to HostedZoneName
          # HostedZoneName: !Sub "${DomainName}"
      CorsConfiguration:
        AllowOrigins: "*"
        AllowHeaders:
          - x-apigateway-header
        AllowMethods:
          - GET
          - POST
        MaxAge: 600

  # Certificate Manager
  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "api.${DomainName}"
      DomainValidationOptions:
        - DomainName: !Sub "api.${DomainName}"
          HostedZoneId: !Sub "${HostedZoneId}"
      ValidationMethod: DNS

  WebCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "${DomainName}"
      DomainValidationOptions:
        - DomainName: !Sub "${DomainName}"
          HostedZoneId: !Sub "${HostedZoneId}"
      ValidationMethod: DNS


  WebsiteDNSName:
    Type: AWS::Route53::RecordSet
    DependsOn: StaticSite
    Properties:
      # HostedZoneId: !Sub "${HostedZoneId}"
      HostedZoneName: !Sub "${DomainName}."
      Name: !Sub "${DomainName}"
      Type: A
      # TODO: Use HostedZoneName instead.
      # For CloudFront, HostedZoneId is always Z2FDTNDATAQYW2, see:
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid
      # HostedZoneId: Z2FDTNDATAQYW2
      # The below Hosted Zone ID is for S3 buckets in us-east-1
      AliasTarget:
        HostedZoneId: Z3AQBSTGFYJSTF
        DNSName: !Sub "${DomainName}.s3-website-us-east-1.amazonaws.com"
#        DNSName: !GetAtt StaticSite.DomainName
#        DNSName: !GetAtt CloudfrontDistribution.DomainName

#  ApiDNSName:
#    Type: AWS::Route53::RecordSet
#    Properties:
#      # For CloudFront, HostedZoneId is always Z2FDTNDATAQYW2, see:
#      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid
#      # For API Gateway, you can use regionalHostedZoneId or distributionHostedZoneId.
#      HostedZoneId: Ref HttpApi.regionalHostedZoneId
#      HostedZoneId: Ref HttpApi.regionalHostedZoneId
#      Name: !Sub "${DomainName}"
#      Type: A
#      AliasTarget:
#        HostedZoneId: !Sub "${HostedZoneId}"
#        DNSName: "api.${DomainName}"


  StaticSite:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: !Sub "${DomainName}"
      WebsiteConfiguration:
        IndexDocument: index.html

  StaticSiteS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: StaticSite
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource:
              Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                  {
                    "Ref": "StaticSite"
                  },
                    "/*"
                ]
              ]

  # Static site for CloudFront
#  StaticSite:
#    Type: AWS::S3::Bucket
#    Properties:
#      # Change bucket name to reflect your website
#      BucketName: !Sub "${DomainName}"
#
#  S3BucketPolicy:
#      Type: AWS::S3::BucketPolicy
#      Properties:
#        Bucket: !Ref StaticSite
#        PolicyDocument:
#        # Restricting access to cloudfront only.
#          Statement:
#            -
#              Effect: Allow
#              Action: 's3:GetObject'
#              Resource:
#                - !Sub "arn:aws:s3:::${StaticSite}/*"
#              Principal:
#                AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"

  # TODO: CloudFront distribution, like this: https://izifortune.com/serverless-website-sam-aws/
  # TODO: Route53 records

#  CloudFrontOriginAccessIdentity:
#    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
#    Properties:
#      CloudFrontOriginAccessIdentityConfig:
#        Comment: 'Serverless website OA'
#
#  CloudfrontDistribution:
#    Type: "AWS::CloudFront::Distribution"
#    Properties:
#      DistributionConfig:
#        Comment: "Cloudfront distribution for serverless website"
#        Aliases:
#          - !Sub "${DomainName}"
#        ViewerCertificate:
#          AcmCertificateArn: !Ref WebCertificate
#          MinimumProtocolVersion: TLSv1.2_2019
#          SslSupportMethod: sni-only
#        DefaultRootObject: "index.html"
#        Enabled: true
#        HttpVersion: http2
#        # List of origins that Cloudfront will connect to
#        Origins:
#          - Id: s3-website
#            DomainName: !GetAtt StaticSite.DomainName
#            S3OriginConfig:
#              # Restricting Bucket access through an origin access identity
#              OriginAccessIdentity:
#                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
#        # To connect the CDN to the origins you need to specify behaviours
#        DefaultCacheBehavior:
#          # Compress resources automatically ( gzip )
#          Compress: 'true'
#          AllowedMethods:
#            - GET
#            - HEAD
#            - OPTIONS
#          ForwardedValues:
#            QueryString: false
#          TargetOriginId: s3-website
#          ViewerProtocolPolicy : redirect-to-https

Outputs:
  ScanPolicyFunction:
    Description: "Scan Policy Lambda Function ARN"
    Value: !GetAtt ScanPolicyFunction.Arn

  WritePolicyFunction:
    Description: "Write Policy Lambda Function ARN"
    Value: !GetAtt WritePolicyFunction.Arn
