service: policy-sentry

frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.6

custom:
  pythonRequirements:
    dockerizePip: true
    zip: true
    layer:
      name: policy-sentry-layer
      description: Layer for Policy Sentry API
      compatibleRuntimes:
        - python3.6

  siteName: policy-site-sls
  s3Sync:
    - bucketName: policy-site-sls
      localDir: static

# you can overwrite defaults here
  stage: stage
  region: us-east-2

functions:
  write_policy:
    handler: lambdas.write_policy.handler.write_policy
    description: "Lambda for Policy Sentry's write policy command"
    events:
      - http:
          path: write
          method: post
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
  scan_policy:
    handler: lambdas.cloudsplaining_scan_policy.handler.cloudsplaining_scan_policy
    description: "Scan a policy file with Cloudsplaining"
    events:
      - http:
          path: scan
          method: post
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
  query_resources:
    handler: lambdas.query_resources.handler.query_resources
    description: "Lambda for Policy Sentry's query ARN table command"
    events:
      - http:
          path: query/resources
          method: get
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
  query_conditions:
    handler: lambdas.query_conditions.handler.query_conditions
    description: "Lambda for Policy Sentry's query conditions table command"
    events:
      - http:
          path: query/conditions
          method: get
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
  query_actions:
    handler: lambdas.query_actions.handler.query_actions
    description: "Lambda for Policy Sentry's query actions table command"
    events:
      - http:
          path: query/actions
          method: get
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
  policy_write:
    handler: lambdas.write_policy.handler.write_policy
    events:
      - http:
          path: call_policy
          method: post

resources:
  Resources:
    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.siteName}
        WebsiteConfiguration:
          IndexDocument: index.html
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticSite
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                  "arn:aws:s3:::",
                  {
                    "Ref": "StaticSite"
                  },
                  "/*"
                ]
                ]

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-s3-sync

